
SET SERVEROUTPUT ON; 
--------------------------------------------------------------------------------------------------------------------------------
--TABLESPACE
CREATE TABLESPACE FARMACIA DATAFILE 'C:\DATAORACLE\AV1\FARMACIA' SIZE 100M
AUTOEXTEND ON NEXT 100M EXTENT MANAGEMENT LOCAL;


--USUÁRIOS DO SISTEMA FARMACIA
CREATE USER DONO_FARM IDENTIFIED BY 1234
DEFAULT TABLESPACE FARMACIA
QUOTA UNLIMITED ON FARMACIA;

GRANT CREATE SESSION, ALTER SESSION, CREATE TABLE, CREATE PROCEDURE, CREATE VIEW, CREATE TRIGGER, CREATE SYNONYM,
      CREATE SEQUENCE TO DONO_FARM;  
      
      
--------------------------------      
CREATE USER ADM_FARM IDENTIFIED BY 1234
DEFAULT TABLESPACE FARMACIA
QUOTA UNLIMITED ON FARMACIA;

GRANT CREATE SESSION, ALTER SESSION, CREATE TABLE, CREATE PROCEDURE, CREATE VIEW, CREATE TRIGGER, CREATE SYNONYM,
      CREATE SEQUENCE TO ADM_FARM;     

--------------------------------

CREATE USER CADASTROS_GERAIS IDENTIFIED BY 1234
DEFAULT TABLESPACE FARMACIA
QUOTA UNLIMITED ON FARMACIA;

GRANT SELECT ON DONO_FARM.FORNECEDOR TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.FORNECEDOR TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.FORNECEDOR TO CADASTROS_GERAIS;
GRANT EXECUTE ON  DONO_FARM.P_FORNECEDOR TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.FABRICANTE TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.FABRICANTE TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.FABRICANTE TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_FORNECEDOR TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.CLIENTE TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.CLIENTE TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.CLIENTE TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_CLIENTE TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.EMPRESA_CONVENIADA TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.EMPRESA_CONVENIADA TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.EMPRESA_CONVENIADA TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_EMPRESA_CONVENIADA TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.CLASSE TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.CLASSE TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.CLASSE TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_CLASSE TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.PORTARIA TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.PORTARIA TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.PORTARIA TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_PORTARIA TO CADASTROS_GERAIS;

GRANT SELECT ON DONO_FARM.USUARIO TO CADASTROS_GERAIS;
GRANT UPDATE ON DONO_FARM.USUARIO TO CADASTROS_GERAIS;
GRANT DELETE ON DONO_FARM.USUARIO TO CADASTROS_GERAIS;
GRANT EXECUTE ON DONO_FARM.P_USUARIO TO CADASTROS_GERAIS;
      
--------------------------------

CREATE USER VENDEDOR IDENTIFIED BY 1234
DEFAULT TABLESPACE FARMACIA
QUOTA UNLIMITED ON FARMACIA;

GRANT SELECT ON DONO_FARM.VENDA TO VENDEDOR;
GRANT SELECT ON  DONO_FARM.PROD_VENDA TO VENDEDOR;
GRANT SELECT ON  DONO_FARM.ESTOQUE TO VENDEDOR;
GRANT EXECUTE ON DONO_FARM.ATUALIZA_TABELAS_SAIDA TO VENDEDOR;  
GRANT EXECUTE ON DONO_FARM.P_VENDA TO VENDEDOR;

--------------------------------

CREATE USER COMPRAS IDENTIFIED BY 1234
DEFAULT TABLESPACE FARMACIA
QUOTA UNLIMITED ON FARMACIA;

GRANT SELECT ON DONO_FARM.ENTRADA_NOTA TO COMPRAS;
GRANT SELECT ON DONO_FARM.PROD_NOTA TO COMPRAS;
GRANT EXECUTE ON DONO_FARM.P_ENTRADA_NOTA TO COMPRAS;
GRANT EXECUTE ON DONO_FARM.ATUALIZA_TABELAS_ENTRADA TO COMPRAS;      
      
      
      
--------------------------------------------------------------------------------------------------------------------------------

--CRIAÇÃO DAS TABELAS

--================================
--TABLE EMPRESA CONVENIADA--
CREATE TABLE EMPRESA_CONVENIADA (
    CODEMPRESA INTEGER NOT NULL,
    NOME VARCHAR2(50),
    CNPJ VARCHAR2(50),
    EMAIL VARCHAR2(50),
    TEL VARCHAR2(50),
    FAX VARCHAR2(50),
    INSC_EST VARCHAR2(50),
    SITE_LINK VARCHAR2(50),
    CIDADE VARCHAR2(50),
    BAIRRO VARCHAR2(50),
    ESTADO VARCHAR2(50),
    CEP VARCHAR2(50),
    RUA VARCHAR2(50),
    NUMR INTEGER,
    
    PRIMARY KEY (CODEMPRESA));
    
    ALTER TABLE EMPRESA_CONVENIADA ADD CONSTRAINT EMPRESA_CONVENIADA_CNPJ UNIQUE(CNPJ);
    ALTER TABLE EMPRESA_CONVENIADA ADD CONSTRAINT EMPRESA_CONVENIADA_INSC_EST UNIQUE(INSC_EST);
    
--================================ 
--TABLE FORNECEDOR--   
CREATE TABLE FORNECEDOR (
    CODFORN INTEGER NOT NULL,
    NOME VARCHAR2(50),
    CNPJ VARCHAR2(50),
    EMAIL VARCHAR(50),
    TEL VARCHAR2(50),
    FAX VARCHAR2(50),
    INSC_EST VARCHAR2(50),
    SITE_LINK VARCHAR2(50),
    CIDADE VARCHAR2(50),
    BAIRRO VARCHAR2(50),
    ESTADO VARCHAR2(50),
    CEP VARCHAR2(50),
    RUA VARCHAR2(50),
    NUMR INTEGER,
    
    PRIMARY KEY (CODFORN));
    
    ALTER TABLE FORNECEDOR ADD CONSTRAINT FORNECEDOR_CNPJ UNIQUE(CNPJ);
    ALTER TABLE FORNECEDOR ADD CONSTRAINT FORNECEDOR_INSC_EST UNIQUE(INSC_EST);

    
--================================
--TABLE FARBICANTE--    
CREATE TABLE FABRICANTE (
    CODFAB INTEGER NOT NULL,
    NOME VARCHAR(50),
    CNPJ VARCHAR2(50),
    EMAIL VARCHAR(50),
    TEL VARCHAR2(50),
    FAX VARCHAR2(50),
    INSC_EST VARCHAR2(50),
    SITE_LINK VARCHAR(50),
    CIDADE VARCHAR2(50),
    BAIRRO VARCHAR2(50),
    ESTADO VARCHAR2(50),
    CEP VARCHAR2(50),
    RUA VARCHAR2(50),
    NUMR INTEGER,
    
    PRIMARY KEY (CODFAB));    
    
    ALTER TABLE FABRICANTE ADD CONSTRAINT FABRICANTE_CNPJ UNIQUE(CNPJ);
    ALTER TABLE FABRICANTE ADD CONSTRAINT FABRICANTE_INSC_EST UNIQUE(INSC_EST);
    
--================================    
-- TABLE CLIENTE--
CREATE TABLE CLIENTE (
    CODCLI INTEGER NOT NULL,
    CODEMPRESA INTEGER,
    CPF VARCHAR2(50) NOT NULL,
    DATA_NASC DATE,
    EMAIL VARCHAR2(50),
    CEL VARCHAR2(50),
    SEXO CHAR,          --M OU F
    RUA VARCHAR2(50),
    NUMR INTEGER,
    BAIRRO VARCHAR2(50),
    CIDADE VARCHAR2(50),
    RG VARCHAR2(50),
    TEL VARCHAR2(50),
    ESTADO VARCHAR2(50),
    NOME VARCHAR2(50),
    OBS VARCHAR2(100),

PRIMARY KEY (CODCLI),
CONSTRAINT FK_CODEMPRESA FOREIGN KEY (CODEMPRESA) REFERENCES EMPRESA_CONVENIADA(CODEMPRESA)
);

    ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_CPF UNIQUE(CPF);
    ALTER TABLE CLIENTE ADD CONSTRAINT CLIENTE_RG UNIQUE(RG);
    

--===============================    
--TABLE USUÁRIO--
CREATE TABLE USUARIO (
    CODUSUARIO INTEGER NOT NULL,
    NOME VARCHAR2(50),
    DATA_NASC DATE,
    EMAIL VARCHAR2(50),
    CEL VARCHAR2(50),
    TEL VARCHAR2(50),
    CEP VARCHAR2(50),
    CIDADE VARCHAR2(50),
    ESTADO VARCHAR2(50),
    BAIRRO VARCHAR2(50),
    RUA VARCHAR2(50),
    NUMR INTEGER,

PRIMARY KEY(CODUSUARIO));


--================================
--TABLE PORTARIA
CREATE TABLE PORTARIA (
    CODPORTARIA INTEGER NOT NULL,
    NOMEPORTARIA VARCHAR2(50),
    RETER_RECEITA VARCHAR2(50),

PRIMARY KEY (CODPORTARIA));


--================================
--TABLE CLASSE
CREATE TABLE CLASSE (
    CODCLASSE INTEGER NOT NULL,
    NOMECLASSE VARCHAR2(50),
    
PRIMARY KEY (CODCLASSE));


--================================
--TABLE SECAO
CREATE TABLE SECAO (
    CODSECAO INTEGER NOT NULL,
    NOMESECAO VARCHAR2(50),
    
PRIMARY KEY (CODSECAO));    


--================================
--TABLE PRODUTO
CREATE TABLE PRODUTO (
    CODPROD INTEGER NOT NULL,
    CODCLASSE INTEGER,
    CODFAB INTEGER,
    CODPORTARIA INTEGER,
    CODSECAO INTEGER,
    NOME VARCHAR2(50),
    MARGEM_LUCRO FLOAT,
    PRECO_FAB FLOAT,
    PRECO_VENDA FLOAT,
    QTDE_CAIXA INTEGER,

PRIMARY KEY(CODPROD),
CONSTRAINT FK_CODCLASSE FOREIGN KEY(CODCLASSE) REFERENCES CLASSE(CODCLASSE),
CONSTRAINT FK_CODFAB FOREIGN KEY(CODFAB) REFERENCES FABRICANTE(CODFAB),
CONSTRAINT FK_CODPORTARIA FOREIGN KEY(CODPORTARIA) REFERENCES PORTARIA(CODPORTARIA),
CONSTRAINT FK_CODSECAO FOREIGN KEY(CODSECAO) REFERENCES SECAO(CODSECAO));


--================================
--TABLE FORN_PROD
CREATE TABLE FORN_PROD (
    CODFORN INTEGER NOT NULL,
    CODPROD INTEGER NOT NULL,

CONSTRAINT  FK_CODFORN   FOREIGN KEY(CODFORN) REFERENCES FORNECEDOR(CODFORN),
CONSTRAINT  FK_CODPROD   FOREIGN KEY(CODPROD) REFERENCES PRODUTO(CODPROD));

--================================
--TABLE VENDA
CREATE TABLE VENDA (
    CODVENDA INTEGER NOT NULL,
    CODEMPRESA INTEGER,
    CODUSUARIO INTEGER,
    CODCLI INTEGER,
    DT_DATA_VENDA DATE,
    VALOR_VENDA FLOAT,

PRIMARY KEY (CODVENDA),
CONSTRAINT FK_FK_CODEMPRESA FOREIGN KEY(CODEMPRESA) REFERENCES EMPRESA_CONVENIADA(CODEMPRESA),
CONSTRAINT FK_CODUSUARIO FOREIGN KEY(CODUSUARIO) REFERENCES USUARIO(CODUSUARIO),
CONSTRAINT FK_CODCLI FOREIGN KEY(CODCLI) REFERENCES CLIENTE(CODCLI)
);


--================================
--TABLE ESTOQUE
CREATE TABLE ESTOQUE (
    END_PROD INTEGER NOT NULL,
    CODPROD INTEGER NOT NULL,
    QTD_PROD_EST INTEGER,
    
PRIMARY KEY (CODPROD),
CONSTRAINT FK_FK_CODPROD FOREIGN KEY(CODPROD) REFERENCES PRODUTO(CODPROD));

--================================
--TABLE ENTRADA_NOTA
CREATE TABLE ENTRADA_NOTA (
    CODNOTA INTEGER NOT NULL,
    CODFORN INTEGER,
    CODUSUARIO INTEGER,
    DT_EMISSAO DATE,
    DT_ENTRADA DATE,
    VALOR_NOTA FLOAT,

PRIMARY KEY(CODNOTA),
CONSTRAINT FK_FK_CODFORN FOREIGN KEY(CODFORN) REFERENCES FORNECEDOR(CODFORN),
CONSTRAINT FK_CODUSUARIO_FK FOREIGN KEY(CODUSUARIO) REFERENCES USUARIO(CODUSUARIO));


--================================
--TABLE PROD_NOTA
CREATE TABLE PROD_NOTA (
    CODPROD INTEGER,
    CODNOTA INTEGER,
    VALOR_PROD_NOTA FLOAT,
    QUANTIDADE INTEGER,

CONSTRAINT FK_FK_FK_CODPROD FOREIGN KEY(CODPROD) REFERENCES PRODUTO(CODPROD),
CONSTRAINT FK_CODNOTA FOREIGN KEY(CODNOTA) REFERENCES ENTRADA_NOTA(CODNOTA));


--================================
--TABLE PROD_VENDA
CREATE TABLE PROD_VENDA(
    CODPROD INTEGER,
    CODVENDA INTEGER,
    VALOR_PROD_VENDA FLOAT,
    QUANTIDADE INTEGER,
    
CONSTRAINT FK_CODPROD_FK FOREIGN KEY(CODPROD) REFERENCES PRODUTO(CODPROD),
CONSTRAINT FK_CODVENDA FOREIGN KEY(CODVENDA) REFERENCES VENDA(CODVENDA));

--------------------------------------------------------------------------------------------------------------------------------

--PROCEDURES PARA INSERT, DELETE E UPDATE NAS TABELAS


--================================
--EMPRESA_CONVENIADA
CREATE OR REPLACE PROCEDURE P_EMPRESA_CONVENIADA (vOPR CHAR, vCODEMPRESA INTEGER, vNOME VARCHAR2, vCNPJ VARCHAR2, 
                                                  vEMAIL VARCHAR2, vTEL VARCHAR2, vFAX VARCHAR2, vINSC_EST VARCHAR2,
                                                  vSITE_LINK VARCHAR2, vCIDADE VARCHAR2, vBAIRRO VARCHAR2, vESTADO VARCHAR2, 
                                                  vCEP VARCHAR2, vRUA VARCHAR2, vNUMR INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO EMPRESA_CONVENIADA(CODEMPRESA, NOME, CNPJ, EMAIL, TEL, FAX, INSC_EST, SITE_LINK, CIDADE, BAIRRO, ESTADO, CEP, RUA, NUMR)
    VALUES (vCODEMPRESA,  vNOME, vCNPJ, vEMAIL, vTEL, vFAX, vINSC_EST, vSITE_LINK, vCIDADE, vBAIRRO, vESTADO, vCEP, vRUA, vNUMR);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE EMPRESA_CONVENIADA SET NOME = vNOME, CNPJ = vCNPJ, EMAIL = vEMAIL, TEL = vTEL, FAX = vFAX, INSC_EST = vINSC_EST, SITE_LINK = vSITE_LINK, CIDADE = vCIDADE, BAIRRO = vBAIRRO, ESTADO = vESTADO, CEP = vCEP, RUA = vRUA, NUMR = vNUMR WHERE CODEMPRESA = vCODEMPRESA;
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM EMPRESA_CONVENIADA WHERE CODEMPRESA = vCODEMPRESA;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');
      
END;

--INSERTS NESTE PROCEDURE
EXECUTE P_EMPRESA_CONVENIADA('I', 01, 'SESI', '08.888.336/0001-09', 'SESI@GMAIL.COM', '3333-3333', '4052 1282', '807.422.860', 'WWW.SESI.COM', 'BRUSQUE', 'AGUAS CLARAS', 'SC', '88353-679', 'RUA AC', 45);
EXECUTE P_EMPRESA_CONVENIADA('I', 02, 'PAGUE MENOS', '46.481.647/0001-83', 'PAGUEMENOS@BOL.COM', '6906-5742', '1243 2222', '638.565.502', 'WWW.PAGUEMENOS.COM', 'PASSOS', 'VILA ROMANA', 'MG', '37901-779', 'RUA ALAMEDA DAS AROEIRAS', 100);
EXECUTE P_EMPRESA_CONVENIADA('I', 03, 'AGEMED', '34.831.898/0001-61', 'AGEMED@YAHOO.COM', '2515-5898', '1333 4522', '805.928.740', 'WWW.AGEMED.COM', 'GURUPI', 'SETOR MORADA DO SOL', 'TO', '77435-340', 'RUA C', 20);
EXECUTE P_EMPRESA_CONVENIADA('I, 04, 'UNIMED', '87.082.832/0001-82', 'UNIMED@HOTMAIL.COM', '7558-5681', '4054 1282', '326.204.091', 'WWW.UNIMED.COM', 'GOIANIA', 'JARDIM EUROPA', 'GO', '74330-660', 'RUA ROSSINI', 324);
EXECUTE P_EMPRESA_CONVENIADA('I', 05, 'BOA VIDA', '07.850.657/0001-97', 'BOAVIDA@GMAIL.COM', '2622-9015', '4062 1282', '421.337.354', 'WWW.BOAVIDA.COM', 'ARAPIRACA', 'JARDIM ESPERANÇA', 'AL', '57307-330', 'AVENIDA ANDRÉ AVELINO DA SILVA', 650);

--================================

--================================
--FABRICANTE
CREATE OR REPLACE PROCEDURE P_FABRICANTE (vOPR CHAR, vCODFAB INTEGER, vNOME VARCHAR2, vCNPJ VARCHAR2, 
                                                  vEMAIL VARCHAR2, vTEL VARCHAR2, vFAX VARCHAR2, vINSC_EST VARCHAR2,
                                                  vSITE_LINK VARCHAR2, vCIDADE VARCHAR2, vBAIRRO VARCHAR2, vESTADO VARCHAR2, 
                                                  vCEP VARCHAR2, vRUA VARCHAR2, vNUMR INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO FABRICANTE(CODFAB, NOME, CNPJ, EMAIL, TEL, FAX, INSC_EST, SITE_LINK, CIDADE, BAIRRO, ESTADO, CEP, RUA, NUMR)
    VALUES (vCODFAB,  vNOME, vCNPJ, vEMAIL, vTEL, vFAX, vINSC_EST, vSITE_LINK, vCIDADE, vBAIRRO, vESTADO, vCEP, vRUA, vNUMR);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE FABRICANTE SET NOME = vNOME, CNPJ = vCNPJ, EMAIL = vEMAIL, TEL = vTEL, FAX = vFAX, INSC_EST = vINSC_EST, SITE_LINK = vSITE_LINK, CIDADE = vCIDADE, BAIRRO = vBAIRRO, ESTADO = vESTADO, CEP = vCEP, RUA = vRUA, NUMR = vNUMR WHERE CODFAB = vCODFAB;
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM FABRICANTE WHERE CODFAB = vCODFAB;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');
      
END;

--INSERTS NESTE PROCEDURE
EXECUTE P_FABRICANTE('I', 01, 'HYPERMARCAS', '10.829.389/0001-36', 'HYPERMARCAS@GMAIL.COM', '7924-8616', '3535 5353', '565.137.325', 'WWW.HYPERMARCAS.COM', 'PORTO ALEGRE',   'VILA ASSUNCAO',        'RS', '91900-660', 'RUA PARECI', 39);
EXECUTE P_FABRICANTE('I', 02, 'EMS CORP', '65.110.114/0001-30', 'EMSCORP@BOL.COM', '4391-1062', '1212 1212',          '937.274.352', 'WWW.EMSCORP.COM',     'GURUPI',    'SETOR LESTE',         'TO', '77410-275', 'AVENIDA ALAGOAS', 50);
EXECUTE P_FABRICANTE('I', 03, 'SANOFI', '54.708.352/0001-25', 'SANOFI@YAHOO.COM', '3510-2545', '1234 9456',           '491.618.060', 'WWW.SANOFI.COM',      'UBERLANDIA',    'PARQUE DAS AMERICAS', 'MG', '38412-800', 'RUA PARAGUAI', 94);
EXECUTE P_FABRICANTE('I', 04, 'EUROFARMA', '47.169.719/0001-14', 'EUROFARMA@HOTMAIL.COM', '0021-3805', '3218 6578',   '991.344.666', 'WWW.EUROFARMA.COM',   'GOIANIA',   'PRIVE RESIDENCIAL ELZA FRONZA',       'GO', '74692-013', 'RUA EVARISTO NARDELLI', 24);
EXECUTE P_FABRICANTE('I', 05, 'NOVARTI', '77.790.664/0001-26', 'NOVARTI@GMAIL.COM', '1619-9739', '4676 3531',         '667.874.610', 'WWW.NOVARTI.COM',     'ALHANDRA', 'CENTRO',    'PB', '58320-973', 'RUA PROJETADA', 300);

--================================

--================================
--FORNECEDOR
CREATE OR REPLACE PROCEDURE P_FORNECEDOR (vOPR CHAR, vCODFORN INTEGER, vNOME VARCHAR2, vCNPJ VARCHAR2, 
                                                  vEMAIL VARCHAR2, vTEL VARCHAR2, vFAX VARCHAR2, vINSC_EST VARCHAR2,
                                                  vSITE_LINK VARCHAR2, vCIDADE VARCHAR2, vBAIRRO VARCHAR2, vESTADO VARCHAR2, 
                                                  vCEP VARCHAR2, vRUA VARCHAR2, vNUMR INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO FORNECEDOR(CODFORN, NOME, CNPJ, EMAIL, TEL, FAX, INSC_EST, SITE_LINK, CIDADE, BAIRRO, ESTADO, CEP, RUA, NUMR)
    VALUES (vCODFORN,  vNOME, vCNPJ, vEMAIL, vTEL, vFAX, vINSC_EST, vSITE_LINK, vCIDADE, vBAIRRO, vESTADO, vCEP, vRUA, vNUMR);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE FORNECEDOR SET NOME = vNOME, CNPJ = vCNPJ, EMAIL = vEMAIL, TEL = vTEL, FAX = vFAX, INSC_EST = vINSC_EST,
                          SITE_LINK = vSITE_LINK, CIDADE = vCIDADE, BAIRRO = vBAIRRO, ESTADO = vESTADO, CEP = vCEP,
                          RUA = vRUA, NUMR = vNUMR WHERE CODFORN = vCODFORN;
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM FORNECEDOR WHERE CODFORN = vCODFORN;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');
      
END;

--INSERTS NESTE PROCEDURE 
EXECUTE P_FORNECEDOR('I', 01, 'ANDORINHA', '06.161.617/0001-75', 'ANDORINHA@HOTMAIL.COM', '8336-1451', '9996 66693', '288.619.936.001', 'WWW.ANDORINHA.COM', 'FEIRA DE SANTANA',   'TOMBA', 'BA', '44091-306', 'RUA EMANUELA MAGALHAES', 799);
EXECUTE P_FORNECEDOR('I', 02, 'GALINDO', '32.635.278/0001-21', 'GALINDO@YAHOO.COM', '9388-3596', '1452 4596',          '957.312.988.159', 'WWW.GALINDO.COM',     'COCOAL',    'JARDIM CLODOALDO', 'RO', '76963-516', 'RUA JOSE BONIFACIO', 50);
EXECUTE P_FORNECEDOR('I', 03, 'DISLAB', '60.244.927/0001-07', 'DISLAB@YAHOO.COM', '7443-0415', '1324 9066',           '153.287.909.061', 'WWW.DISLAB.COM',      'RIO BRANCO',    'BAIXO DA COLINA', 'AC', '69901-328', 'RUA FRANCISCO FERREIRA', 3567);
EXECUTE P_FORNECEDOR('I', 04, 'DISTRIMED', '77.359.968/0001-33', 'DISTRIMED@YAHOO.COM', '1274-1839', '1832 6678',   '673.406.935.290', 'WWW.DISTRIMED.COM',   'SANTO AUGUSTO', 'CENTRO', 'RS', '98590-970', 'AVENIDA DO COMERCIO', 244);
EXECUTE P_FORNECEDOR('I', 05, 'UTIL DROGAS', '76.168.757/0001-50', 'UTILDROGAS@GMAIL.COM', '4381-0622', '4677 7777', '417.834.330.254', 'WWW.UTILDROGAS.COM',     'FLORIANOPOLIS', 'AGRONOMICA', 'SC', '88025-565', 'BECO BELTRANI DA SILVA', 15);


--================================

--================================
--CLIENTE
CREATE OR REPLACE PROCEDURE P_CLIENTE (vOPR CHAR, vCODCLI INTEGER, vCODEMPRESA INTEGER, vCPF VARCHAR2, vDATA_NASC DATE, vEMAIL VARCHAR2,
                                       vCEL VARCHAR2, vSEXO CHAR, vRUA VARCHAR2, vNUMR INTEGER, vBAIRRO VARCHAR2, vCIDADE VARCHAR2,
                                        vRG VARCHAR2, vTEL VARCHAR2, vESTADO VARCHAR2, vNOME VARCHAR2, vOBS VARCHAR2)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO CLIENTE(CODCLI, CODEMPRESA, CPF, DATA_NASC, EMAIL, CEL, SEXO, RUA, NUMR, BAIRRO, CIDADE, RG, TEL, ESTADO, NOME, OBS)
    VALUES (vCODCLI, vCODEMPRESA, vCPF, vDATA_NASC, vEMAIL, vCEL, vSEXO, vRUA, vNUMR, vBAIRRO, vCIDADE, vRG, vTEL, vESTADO, vNOME, vOBS);
  ELSE
  
  IF(vOPR = 'U') THEN
    UPDATE CLIENTE SET CODEMPRESA = vCODEMPRESA, CPF = vCPF, DATA_NASC = vDATA_NASC, EMAIL = vEMAIL, CEL = vCEL, SEXO = vSEXO,
                       RUA = vRUA, NUMR = vNUMR, BAIRRO = vBAIRRO, CIDADE = vCIDADE, RG = vRG, TEL = vTEL, ESTADO = vESTADO,
                       NOME = vNOME, OBS = vOBS
                       WHERE CODCLI = vCODCLI;                 
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM CLIENTE WHERE CODCLI = vCODCLI;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');
      
END;

--INSERTS NESTE PROCEDURE 
EXECUTE P_CLIENTE('I', 01, 03, '184.280.820-65', '01/07/2000', 'JOAO@GMAIL.COM',     '38258-5373', 'M', 'RUA XV', 455, 'CENTRO', 'BLUMENAU', '29.187.810-6', '4894-0706', 'SC', 'JOAO PEREIRA', '-');
EXECUTE P_CLIENTE('I', 02, 01, '887.588.800-03', '09/01/1982', 'MARIA@HOTMAIL.COM',  '9176-6602',  'F', 'RUA OSIRIS', 20, 'NOVA FLORESTA', 'PORTO VELHO', '39.206.285-9', '6889-9193', 'RO', 'MARIA MARGARIDA', '-');
EXECUTE P_CLIENTE('I', 03, 05, '501.476.360-00', '10/09/1999', 'FRED@BOL.COM',       '9959-7759',  'M', 'ALAMEDA', 326, 'CENTRO', 'BLUMENAU', '44.877.232-2', '3465-6565', 'SC', 'FREDERICO MIGUEL FAGUNDES', '-');
EXECUTE P_CLIENTE('I', 04, 04, '506.300.100-99', '15/12/1950', 'IVONILDA@GMAIL.COM', '9206-0422',  'F', 'RUA MARESINHO', 50, 'BOAS NOVAS', 'CACHOEIRA','20.394.778-2', '1232-4226', 'BAHIA', 'IVONILDA MAJUREIRA PAFUNCIA', 'CLIENTE OURO');
EXECUTE P_CLIENTE('I', 05, 02, '821.624.560-28', '26/02/2001', 'AMANDA@YAHOO.COM',   '0824-4286',  'F', 'RUA BALEIA', 100, 'JUREE', 'FLORIANOPOLIS', '36.127.367-8', '1597-3576', 'SC', 'AMANDA NUNES SILVA', '-');


--================================

--================================
--USUÁRIO
CREATE OR REPLACE PROCEDURE P_USUARIO (vOPR CHAR, vCODUSUARIO INTEGER, vNOME VARCHAR2, vDATA_NASC DATE, vEMAIL VARCHAR2,
                                       vCEL VARCHAR2, vTEL VARCHAR2, vCEP VARCHAR2, vCIDADE VARCHAR2, vESTADO VARCHAR2, 
                                       vBAIRRO VARCHAR2, vRUA VARCHAR2, vNUMR INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO USUARIO(CODUSUARIO, NOME, DATA_NASC, EMAIL, CEL, TEL, CEP, CIDADE, ESTADO, BAIRRO, RUA, NUMR)
    VALUES (vCODUSUARIO, vNOME, vDATA_NASC, vEMAIL, vCEL, vTEL, vCEP, vCIDADE, vESTADO, vBAIRRO, vRUA, vNUMR);
    
  ELSE
  
  IF(vOPR = 'U') THEN
    UPDATE USUARIO SET CODUSUARIO = vCODUSUARIO, NOME = vNOME, DATA_NASC = vDATA_NASC, EMAIL = vEMAIL, CEL = vCEL,
                       TEL = vTEL, CEP = vCEP, CIDADE = vCIDADE, ESTADO = vESTADO, BAIRRO = vBAIRRO, RUA = vRUA, NUMR = vNUMR
                       WHERE CODUSUARIO = vCODUSUARIO;                 
  ELSE
  
  IF(vOPR = 'D')THEN
    DELETE FROM USUARIO WHERE CODUSUARIO = vCODUSUARIO;
  ELSE
  
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');
      
END;

--INSERTS NESTE PROCEDURE 
EXECUTE P_USUARIO ('I', 1, 'ROBERTA CARMEM', '12/12/1979', 'ROBCARMEM@HOTMAIL.COM', '9777-5656', '3333-5555', '87114-230', 'SARANDI', 'PR', 'JARDIM INDEPENDENCIA', 'AVENIDA RIO BRANCO', 700);
EXECUTE P_USUARIO ('I', 2, 'MARIO CECILIO', '03/03/2003', 'CECILIO@HOTMAIL.COM', '8956-3209', '6666-5555', '29112-360', 'VILA VELHA', 'ES', 'RIO MARINHO', 'RUA ALFREDO MERLO', 355);
EXECUTE P_USUARIO ('I', 3, 'RONALD MACDONALDS', '19/08/1999', 'MACDONALDS@HOTMAIL.COM', '4545-4545', '3333-5555', '64008-570', 'TERESINHA', 'PI', 'BUENOS AIRESS', 'RUA PROFESSOR EDSON CUNHA', 546);
EXECUTE P_USUARIO ('I', 4, 'TONY STARK', '23/06/1975', 'STARK@HOTMAIL.COM', '9494-6060', '5665-9889', '77020-582', 'PALMAS', 'TO', 'PLANO DIREITO SUL', 'QUADRA 210 SUL AVENIDA', 5);
EXECUTE P_USUARIO ('I', 5, 'STEVE ROGERS', '15/04/2005', 'STEVE@HOTMAIL.COM', '9789-3535', '5555-5555', '69901-139', 'RIO BRANCO', 'AC', 'MORADA DO SOL', 'RUA GOMES DO ROLA', 69);


--================================

--================================
--PORTARIA
CREATE OR REPLACE PROCEDURE P_PORTARIA (vOPR CHAR, vCODPORTARIA INTEGER, vNOMEPORTARIA VARCHAR2, vRETER_RECEITA VARCHAR2)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO PORTARIA(CODPORTARIA, NOMEPORTARIA, RETER_RECEITA)
    VALUES (vCODPORTARIA, vNOMEPORTARIA, vRETER_RECEITA);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE PORTARIA SET CODPORTARIA = vCODPORTARIA, NOMEPORTARIA = vNOMEPORTARIA, RETER_RECEITA = vRETER_RECEITA
                       WHERE CODPORTARIA = vCODPORTARIA;                 
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM PORTARIA WHERE CODPORTARIA = vCODPORTARIA;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');  
END;

EXECUTE P_PORTARIA ('U', 01, 'PORTARIA 01', 'RECEITA NIVEL 01 (SOMENTE AUTORIZADA)');
EXECUTE P_PORTARIA ('U', 02, 'PORTARIA 02', 'RECEITA NIVEL 02 (OBRIGATORIA)');
EXECUTE P_PORTARIA ('U', 03, 'PORTARIA 03', 'NAO OBRIGATORIA');


--================================

--================================
--CLASSE
CREATE OR REPLACE PROCEDURE P_CLASSE (vOPR CHAR, vCODCLASSE INTEGER, vNOMECLASSE VARCHAR2)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO CLASSE(CODCLASSE, NOMECLASSE)
    VALUES (vCODCLASSE, vNOMECLASSE);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE CLASSE SET CODCLASSE = vCODCLASSE, NOMECLASSE = vNOMECLASSE
                       WHERE CODCLASSE = vCODCLASSE;                 
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM CLASSE WHERE CODCLASSE = vCODCLASSE;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');  
END;

--INSERTS NESTE PROCEDURE
EXECUTE P_CLASSE ('I', 1, 'DE REFERENCIA');
EXECUTE P_CLASSE ('I', 2, 'SIMILARES');
EXECUTE P_CLASSE ('I', 3, 'GENERICOS');

--================================

--================================
--SECAO
CREATE OR REPLACE PROCEDURE P_SECAO (vOPR CHAR, vCODSECAO INTEGER, vNOMESECAO VARCHAR2)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO SECAO(CODSECAO, NOMESECAO)
    VALUES (vCODSECAO, vNOMESECAO);
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE SECAO SET CODSECAO = vCODSECAO, NOMESECAO = vNOMESECAO
                       WHERE CODSECAO = vCODSECAO;                 
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM SECAO WHERE CODSECAO = vCODSECAO;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');  
END;

--INSERTS NESTE PROCEDURE
EXECUTE P_SECAO ('I', 01, 'ANTIBIOTICOS');
EXECUTE P_SECAO ('I', 02, 'ANTIALERGICOS');
EXECUTE P_SECAO ('I', 03, 'NEURAIS');
EXECUTE P_SECAO ('I', 04, 'GASTRO INTESTINAIS');
EXECUTE P_SECAO ('I', 05, 'MANIPULADOS');

--================================

--================================
--PRODUTO
CREATE OR REPLACE PROCEDURE P_PRODUTO (vOPR CHAR, vCODPROD INTEGER, vCODCLASSE INTEGER, vCODFAB INTEGER, vCODPORTARIA INTEGER,
                                       vCODSECAO INTEGER, vNOME VARCHAR2, vMARGEM_LUCRO FLOAT, vPRECO_FAB FLOAT, 
                                       vPRECO_VENDA FLOAT, vQTDE_CAIXA INTEGER, vCODFORN INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO PRODUTO(CODPROD, CODCLASSE, CODFAB, CODPORTARIA, CODSECAO, NOME, MARGEM_LUCRO, PRECO_FAB, PRECO_VENDA, QTDE_CAIXA)
    VALUES (vCODPROD, vCODCLASSE, vCODFAB, vCODPORTARIA, vCODSECAO, vNOME, vMARGEM_LUCRO, vPRECO_FAB, vPRECO_VENDA, vQTDE_CAIXA);
    
    INSERT INTO FORN_PROD (CODFORN, CODPROD)
    VALUES (vCODFORN, vCODPROD);
    
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE PRODUTO SET CODPROD = vCODPROD, CODCLASSE = vCODCLASSE, CODFAB = vCODFAB, CODPORTARIA = vCODPORTARIA,
                       CODSECAO = vCODSECAO, NOME = vNOME, MARGEM_LUCRO = vMARGEM_LUCRO, PRECO_FAB = vPRECO_FAB,
                       PRECO_VENDA = vPRECO_VENDA, QTDE_CAIXA = vQTDE_CAIXA
                       WHERE CODPROD = vCODPROD;                      
                       
    UPDATE FORN_PROD SET CODPROD = vCODPROD, CODFORN = vCODFORN WHERE CODPROD = vCODPROD;                  
                       
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM ESTOQUE WHERE CODPROD = vCODPROD;
    DELETE FROM FORN_PROD WHERE CODPROD = vCODPROD;
    DELETE FROM PRODUTO WHERE CODPROD = vCODPROD;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');  
END;

--INSERTS NESTE PROCEDURE

EXECUTE P_PRODUTO ('I', 1, 1, 4, 3, 4, 'DRAMIN', '1,35', 10, '13,50', 10, 2);
EXECUTE P_PRODUTO ('I', 2, 1, 2, 3, 2, 'ALEGRA', '1,35', '35,00', '47,25', 5, 3);
EXECUTE P_PRODUTO ('I', 3, 1, 1, 3, 4, 'ASPIRINA', '1,35', '13,50', '18,25',15, 5);
EXECUTE P_PRODUTO ('I', 4, 2, 5, 2, 5, 'TYLEX', '1,35', '99,00', '133,65',10, 4);
EXECUTE P_PRODUTO ('I', 5, 3, 2, 3, 4, 'PARACETAMOL', '1,35', '5,35', '7,22',20, 1);
EXECUTE P_PRODUTO ('I', 6, 3, 2, 3, 4, 'TESTECETAMOL', '1,35', '0', '0',20, 1);

--FALTA PROCEDURES ENTRADA NOTA E VENDA

--================================

--================================
--ESTOQUE
CREATE OR REPLACE PROCEDURE P_ESTOQUE (vOPR CHAR, vEND_PROD INTEGER, vCODPROD INTEGER, vQTD_PROD_EST INTEGER)
IS
  vEXCEPTION EXCEPTION;
BEGIN

  IF (vOPR = 'I') THEN
    INSERT INTO ESTOQUE(END_PROD, CODPROD, QTD_PROD_EST)
    VALUES (vEND_PROD, vCODPROD, vQTD_PROD_EST);
    
    
  ELSE
  IF(vOPR = 'U') THEN
    UPDATE ESTOQUE SET END_PROD = vEND_PROD, CODPROD = vCODPROD, qtd_prod_est = vqtd_prod_est
                       WHERE CODPROD = vCODPROD;                      
                       
  ELSE
  IF(vOPR = 'D')THEN
    DELETE FROM ESTOQUE WHERE CODPROD = vCODPROD;
  ELSE
    RAISE vEXCEPTION;
  END IF;
  END IF;
  END IF;
  EXCEPTION
    WHEN vEXCEPTION THEN
      dbms_output.put_line('ATENÇÃO! Operação diferente de I, D, U.');  
END;

EXECUTE P_ESTOQUE ('I', 1, 1, 0);
EXECUTE P_ESTOQUE ('I', 2, 2, 0);
EXECUTE P_ESTOQUE ('I', 3, 3, 0);
EXECUTE P_ESTOQUE ('I', 4, 4, 0);
EXECUTE P_ESTOQUE ('I', 5, 5, 0);
EXECUTE P_ESTOQUE ('I', 6, 6, 0);

--================================

--================================

--================================

--================================

--================================

--================================

--================================

--================================

-- BLOCO PLSQL PARA CONTROLE DE ENTRADA DE PRODUTO E ATUALIZAÇÃO DE ESTOQUE

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE P_ENTRADA_NOTA (vCODNOTA INTEGER, vCODFORN INTEGER, vCODUSUARIO INTEGER, vDT_EMISSAO DATE, vDT_ENTRADA DATE)

IS
    vVALOR_NOTA FLOAT;
    vEXCEPTION EXCEPTION;
BEGIN
        
        vVALOR_NOTA := 0;
        
        INSERT INTO ENTRADA_NOTA(CODNOTA, CODFORN, CODUSUARIO, DT_EMISSAO, DT_ENTRADA, VALOR_NOTA)
                VALUES (vCODNOTA, vCODFORN, vCODUSUARIO, vDT_EMISSAO, vDT_ENTRADA, vVALOR_NOTA);
                
                
        dbms_output.put_line('NUMERO DE NOTA CADASTRADO COM SUCESSO. CHAME O PROCEDURE ATUALIZA_TABELAS_ENTRADA PARA ADICIONAR OS PRODUTOS');       
        
EXCEPTION
    WHEN vEXCEPTION THEN
    dbms_output.put_line('ATENÇÃO! ERRO: REPITA O PROCEDIMENTO');
END;

EXECUTE P_ENTRADA_NOTA (1, 1, 2, '05/10/2020', '11/10/2020');

-----------------------------------------------


--MOVIMENTAÇÃO DOS PRODUTOS QUE FORAM DADAS AS ENTRADAS
CREATE OR REPLACE PROCEDURE ATUALIZA_TABELAS_ENTRADA( vCODPROD INTEGER, vCODNOTA INTEGER, vVALOR_PROD_NOTA FLOAT, vQUANTIDADE INTEGER)

IS
    vEXCEPTION EXCEPTION;
BEGIN  
    
    INSERT INTO PROD_NOTA (CODPROD, CODNOTA, VALOR_PROD_NOTA, QUANTIDADE)
                VALUES (vCODPROD, vCODNOTA, vVALOR_PROD_NOTA, vQUANTIDADE);
        
    --ATUALIZAR TABELA ENTRADA_NOTA     
    UPDATE ENTRADA_NOTA SET VALOR_NOTA = VALOR_NOTA +  vVALOR_PROD_NOTA * vQUANTIDADE WHERE CODNOTA = vCODNOTA;
    
    
    
    UPDATE ESTOQUE SET QTD_PROD_EST = qtd_prod_est + vQUANTIDADE WHERE CODPROD = vCODPROD;
    
    
    UPDATE PRODUTO SET PRECO_FAB = vVALOR_PROD_NOTA WHERE CODPROD = vCODPROD AND vVALOR_PROD_NOTA > PRECO_FAB;
    UPDATE PRODUTO SET PRECO_VENDA = PRECO_FAB * MARGEM_LUCRO WHERE CODPROD = vCODPROD;
    
    
    
    
EXCEPTION
    WHEN vEXCEPTION THEN
    dbms_output.put_line('ATENÇÃO! ERRO: REPITA O PROCEDIMENTO');
    
END;

EXECUTE ATUALIZA_TABELAS_ENTRADA (5, 1, '10',3);
EXECUTE ATUALIZA_TABELAS_ENTRADA (6, 1, '100',10);







--================================

--================================

--================================

-- BLOCO PLSQL PARA CONTROLE DE VENDA DE PRODUTO E ATUALIZAÇÃO DE ESTOQUE

SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE P_VENDA (vCODVENDA INTEGER, vCODEMPRESA INTEGER, vCODUSUARIO INTEGER, vCODCLI INTEGER, vDT_DATA_VENDA DATE)

IS
    vVALOR_VENDA FLOAT;
    vEXCEPTION EXCEPTION;
BEGIN
        
        vVALOR_VENDA := 0;
        
        INSERT INTO VENDA(CODVENDA, CODEMPRESA, CODUSUARIO, CODCLI, DT_DATA_VENDA, VALOR_VENDA)
                VALUES (vCODVENDA, vCODEMPRESA, vCODUSUARIO, vCODCLI, vDT_DATA_VENDA, vVALOR_VENDA);
                
        dbms_output.put_line('VENDA CADASTRADA COM SUCESSO. CHAME O PROCEDURE ATUALIZA_TABELAS_SAIDA PARA ADICIONAR OS PRODUTOS DA VENDA');       
        
EXCEPTION
    WHEN vEXCEPTION THEN
    dbms_output.put_line('ATENÇÃO! ERRO: REPITA O PROCEDIMENTO');
END;

EXECUTE P_VENDA (1, 2, 5, 5, SYSDATE);

-----------------------------------------------


--MOVIMENTAÇÃO DOS PRODUTOS QUE FORAM DADAS AS SAIDAS
CREATE OR REPLACE PROCEDURE ATUALIZA_TABELAS_SAIDA(vCODPROD INTEGER, vCODVENDA INTEGER, vQUANTIDADE INTEGER)

IS
    vEXCEPTION EXCEPTION;
    vVERIFCODPROD INTEGER;
    vVENDAPROD FLOAT;
BEGIN  
    
    SELECT QTD_PROD_EST INTO vVERIFCODPROD FROM estoque WHERE codprod = vCODPROD;
    
    IF (vverifcodprod >= vQUANTIDADE) THEN
    
        INSERT INTO PROD_VENDA (CODPROD, CODVENDA, QUANTIDADE)
                VALUES (vCODPROD, vCODVENDA, vQUANTIDADE);
        
        
        SELECT PRECO_VENDA INTO vVENDAPROD FROM PRODUTO WHERE CODPROD = vCODPROD;
        UPDATE PROD_VENDA SET valor_prod_venda = vVENDAPROD WHERE CODPROD = vCODPROD;
        
        
        UPDATE VENDA SET VALOR_VENDA = VALOR_VENDA + vVENDAPROD * vQUANTIDADE WHERE CODVENDA = vCODVENDA;
    
    
    
        UPDATE ESTOQUE SET QTD_PROD_EST = qtd_prod_est - vQUANTIDADE WHERE CODPROD = vCODPROD;
    
    
    
    ELSE
            dbms_output.put_line('SALDO INSUFICIENTE');
    END IF;
    
EXCEPTION
    WHEN vEXCEPTION THEN
    dbms_output.put_line('ATENÇÃO! ERRO: REPITA O PROCEDIMENTO');
    
END;

EXECUTE ATUALIZA_TABELAS_SAIDA (6, 1, 5);

-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

--CRIAÇÃO DAS VIEWS

CREATE OR REPLACE VIEW LISTA_ITEM_ESTOQUE AS 
    SELECT PROD.CODPROD CODIGO, PROD.NOME NOME, CLA.NOMECLASSE CLASSE, SE.NOMESECAO SECAO, POR.NOMEPORTARIA PORTARIA,
           'R$' || TO_CHAR(PROD.PRECO_VENDA,'9999D99') "VALOR_DE_VENDA",  PROD.QTDE_CAIXA "QUANTIDADE_POR_CAIXA", EST.QTD_PROD_EST || '  UN.' "SALDO_EM_ESTOQUE",
           EN.DT_ENTRADA "ULTIMA_COMPRA" , FORN.NOME "NOME_FORNECEDOR"
           
           
    FROM PRODUTO PROD, ENTRADA_NOTA EN, ESTOQUE EST, CLASSE CLA, SECAO SE, PORTARIA POR, PROD_NOTA PN, FORNECEDOR FORN, FORN_PROD FNP
    WHERE PROD.CODPROD = PN.CODPROD
    AND PROD.CODPROD = FNP.CODPROD
    AND FNP.CODFORN = FORN.CODFORN
    AND PROD.CODCLASSE = CLA.CODCLASSE
    AND PROD.CODPORTARIA = POR.CODPORTARIA
    AND PROD.CODSECAO = SE.CODSECAO
    AND PN.CODNOTA = EN.CODNOTA
    AND PROD.CODPROD = EST.CODPROD
    
    ORDER BY EN.DT_ENTRADA ASC;

SELECT * FROM LISTA_ITEM_ESTOQUE;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW LISTA_VENDAS AS 
    SELECT V.CODVENDA "NUMERO_DA_VENDA", 
           C.NOME "CLIENTE" ,
           C.CPF "CPF",
           EMPR.NOME "CONVENIO",
           EMPR.CNPJ "CNPJ",
           V.DT_DATA_VENDA "DATA_DA_VENDA",
           'R$' || TO_CHAR(V.VALOR_VENDA,'9999D99') "VALOR_TOTAL",
           U.NOME "INTERMEDIADOR"
           
    FROM VENDA V, CLIENTE C, EMPRESA_CONVENIADA EMPR, USUARIO U
    WHERE v.codusuario = u.codusuario
    AND v.codcli = c.codcli
    AND c.codempresa = empr.codempresa;

SELECT * FROM LISTA_VENDAS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW PRODUTOS_VENDIDOS AS 
    SELECT CLI.NOME CLIENTE, PV.CODVENDA "ID_DA_VENDA", PROD.NOME "PRODUTO", 'R$' || TO_CHAR(PV.VALOR_PROD_VENDA, '9999D99') "VALOR_VENDIDO",
    PV.QUANTIDADE || ' UN' "QUANTIDADE", 'R$' || TO_CHAR((PV.QUANTIDADE * PV.VALOR_PROD_VENDA), '9999D99') "TOTAL_DO_PRODUTO" 
    FROM CLIENTE CLI, VENDA V, PROD_VENDA PV, PRODUTO PROD
    WHERE PROD.CODPROD = PV.CODPROD
    AND PV.CODVENDA = V.CODVENDA
    AND V.CODCLI = CLI.CODCLI;

SELECT * FROM PRODUTOS_VENDIDOS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW PRODUTOS_CADASTRADOS AS
    SELECT PROD.CODPROD CODIGO,
           PROD.NOME NOME, 
           CLA.NOMECLASSE CLASSE, 
           SE.NOMESECAO SECAO, 
           POR.NOMEPORTARIA PORTARIA,
           FORN.NOME FORNECEDOR,
           FAB.NOME FABRICANTE
           
    FROM PRODUTO PROD, CLASSE CLA, SECAO SE, PORTARIA POR, FORNECEDOR FORN, FABRICANTE FAB, FORN_PROD FP
    WHERE PROD.CODCLASSE =  CLA.CODCLASSE
    AND PROD.CODSECAO = SE.CODSECAO
    AND PROD.CODPORTARIA = POR.CODPORTARIA
    AND PROD.CODPROD = FP.CODPROD
    AND FP.CODFORN = FORN.CODFORN
    AND PROD.CODFAB = FAB.CODFAB
    
    ORDER BY (PROD.CODPROD) ASC;
    
SELECT * FROM PRODUTOS_CADASTRADOS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW CLIENTES_CADASTRADOS AS
    SELECT CODCLI "CODIGO_CLIENTE", NOME NOME, SEXO SEXO, TO_CHAR(DATA_NASC, 'DD/MM/YYYY') NASCIMENTO, CPF CPF, RG RG, CEL CELULAR, TEL TELEFONE, EMAIL "EMAIL", 
           RUA ||' '||NUMR||', '||BAIRRO||', '||CIDADE||', '||ESTADO "ENDERECO" 
           
    FROM CLIENTE;


SELECT * FROM CLIENTES_CADASTRADOS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW CONVENIOS AS
    SELECT CODEMPRESA "CODIGO",
           NOME,
           CNPJ,
           INSC_EST "INSCRIÇÃO_ESTADUAL",
           TEL "TELEFONE",
           FAX,
           EMAIL "EMAIL",
           SITE_LINK "SITE",
           RUA ||' '||NUMR||', '||BAIRRO||', '||CIDADE||', '|| ESTADO|| '. CEP: '|| CEP "ENDERECO"
    
    
    FROM EMPRESA_CONVENIADA;
    
    SELECT * FROM CONVENIOS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW USUARIOS AS
    SELECT CODUSUARIO "CODIGO_USUARIO", NOME, TO_CHAR(DATA_NASC, 'DD/MM/YYYY') NASCIMENTO, CEL "CELULAR", TEL "TELEFONE", EMAIL "EMAIL", 
           RUA ||' '||NUMR||', '||BAIRRO||', '||CIDADE||', '|| ESTADO|| '. CEP: '|| CEP "ENDEREÇO"
            
    FROM  USUARIO;

    SELECT * FROM USUARIOS;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW FABRICANTES AS
    SELECT CODFAB "CODIGO",
           NOME,
           CNPJ,
           INSC_EST "INSCRICAO_ESTADUAL",
           TEL "TELEFONE",
           FAX,
           EMAIL "EMAIL",
           SITE_LINK "SITE",
           RUA ||' '||NUMR||', '||BAIRRO||', '||CIDADE||', '|| ESTADO|| '. CEP: '|| CEP "ENDERECO"
    
    
    FROM FABRICANTE;

   SELECT * FROM FABRICANTES;
-----------------------------------------------------------
-----------------------------------------------------------

CREATE OR REPLACE VIEW FORNECEDORES AS
    SELECT CODFORN "CODIGO",
           NOME,
           CNPJ,
           INSC_EST "INSCRICAO_ESTADUAL",
           TEL "TELEFONE",
           FAX,
           EMAIL "EMAIL",
           SITE_LINK "SITE",
           RUA ||' '||NUMR||', '||BAIRRO||', '||CIDADE||', '|| ESTADO|| '. CEP: '|| CEP "ENDERECO"
    
    
    FROM FORNECEDOR;

   SELECT * FROM FORNECEDORES;
   
-----------------------------------------------------------
-----------------------------------------------------------


----CREATE DA JOB

CREATE OR REPLACE PROCEDURE ATUALIZA_PRECO_JOB IS

vDESC FLOAT  :=  0.85;

BEGIN
    
    UPDATE PRODUTO SET PRECO_VENDA = PRECO_VENDA * vDESC WHERE CODPROD IN (SELECT PV.CODPROD 
                                                    FROM VENDA V, PROD_VENDA PV, PRODUTO PROD
                                                    WHERE PROD.CODPROD = PV.CODPROD
                                                    AND PV.CODVENDA = V.CODVENDA
                                                    AND V.DT_DATA_VENDA < TRUNC(SYSDATE-20));    
    
END;



BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   job_name           =>  'ATUALIZA_PRECOS',
   job_type           =>  'STORED_PROCEDURE',
   job_action         =>  'ATUALIZA_PRECO_JOB',
   start_date         =>  SYSDATE,
   repeat_interval    =>  'FREQ=DAILY;INTERVAL=1',
   enabled            =>  TRUE,
   comments           =>  'DA DESCONTO EM ITENS COM POUCO GIRO');
END;

------------------------------------------------------------------------------------------------

--SPOOLS

CREATE OR REPLACE PROCEDURE R_CLIENTES_CADASTRADOS IS

    CURSOR CUR_CLIENTES_CADASTRADOS IS SELECT * FROM CLIENTES_CADASTRADOS;

    c1 CUR_CLIENTES_CADASTRADOS%rowtype;
    
BEGIN 

    OPEN CUR_CLIENTES_CADASTRADOS;
    FETCH CUR_CLIENTES_CADASTRADOS INTO C1;
    LOOP
        EXIT WHEN CUR_CLIENTES_CADASTRADOS%NOTFOUND;
        
        
         dbms_output.put_line( C1.CODIGO_CLIENTE|| ' ' ||C1.NOME || ' ' || C1.SEXO || ' ' || C1.NASCIMENTO  || ' ' || C1.CPF || ' ' ||
         C1.RG || ' ' || C1.CELULAR || ' ' || C1.TELEFONE || ' ' || C1.EMAIL || ' ' );
        
    FETCH CUR_CLIENTES_CADASTRADOS INTO C1;    
    END LOOP;
    CLOSE CUR_CLIENTES_CADASTRADOS;
END;

spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\CLIENTES_CADASTRADOS.csv'
set serveroutput on;
CALL R_CLIENTES_CADASTRADOS();
spool off;


---------


CREATE OR REPLACE PROCEDURE R_CONVENIOS IS

    CURSOR CUR_CONVENIOS IS SELECT * FROM CONVENIOS;

    c1 CUR_CONVENIOS%rowtype;
    
BEGIN 

    OPEN CUR_CONVENIOS;
    FETCH CUR_CONVENIOS INTO C1;
    LOOP
        EXIT WHEN CUR_CONVENIOS%NOTFOUND;
        
        
         dbms_output.put_line( C1.CODIGO|| ' ' ||C1.NOME || ' ' || C1.CNPJ || ' ' || C1.INSCRIÇÃO_ESTADUAL  || ' ' || C1.TELEFONE || ' ' ||
         C1.FAX || ' ' || C1.EMAIL || ' ' || C1.SITE || ' ' || C1.ENDERECO || ' ' );
        
    FETCH CUR_CONVENIOS INTO C1;    
    END LOOP;
    CLOSE CUR_CONVENIOS;
END;

spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\CONVENIOS.csv'
set serveroutput on;
CALL R_CONVENIOS();
spool off;


----------------

CREATE OR REPLACE PROCEDURE R_FABRICANTES IS

    CURSOR CUR_FABRICANTES IS SELECT * FROM FABRICANTES;

    c1 CUR_FABRICANTES%rowtype;
    
BEGIN 

    OPEN CUR_FABRICANTES;
    FETCH CUR_FABRICANTES INTO C1;
    LOOP
        EXIT WHEN CUR_FABRICANTES%NOTFOUND;
        
        
         dbms_output.put_line( C1.CODIGO|| ' ' ||C1.NOME || ' ' || C1.CNPJ || ' ' || C1.INSCRICAO_ESTADUAL  || ' ' || C1.TELEFONE || ' ' ||
         C1.FAX || ' ' || C1.EMAIL || ' ' || C1.SITE || ' ' || C1.ENDERECO || ' ' );
        
    FETCH CUR_FABRICANTES INTO C1;    
    END LOOP;
    CLOSE CUR_FABRICANTES;
END;

spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\FABRICANTES.csv'
set serveroutput on;
CALL R_FABRICANTES();
spool off;

---------------------------------------------------------------

CREATE OR REPLACE PROCEDURE R_FORNECEDORES IS

    CURSOR CUR_FORNECEDORES IS SELECT * FROM FORNECEDORES;

    c1 CUR_FORNECEDORES%rowtype;
    
BEGIN 

    OPEN CUR_FORNECEDORES;
    FETCH CUR_FORNECEDORES INTO C1;
    LOOP
        EXIT WHEN CUR_FORNECEDORES%NOTFOUND;
        
        
         dbms_output.put_line( C1.CODIGO|| ' ' ||C1.NOME || ' ' || C1.CNPJ || ' ' || C1.INSCRICAO_ESTADUAL  || ' ' || C1.TELEFONE || ' ' ||
         C1.FAX || ' ' || C1.EMAIL || ' ' || C1.SITE || ' ' || C1.ENDERECO || ' ' );
        
    FETCH CUR_FORNECEDORES INTO C1;    
    END LOOP;
    CLOSE CUR_FORNECEDORES;
END;

spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\FORNECEDORES.csv'
set serveroutput on;
CALL R_FORNECEDORES();
spool off;


------------------------------------------

CREATE OR REPLACE PROCEDURE R_LISTA_ITEM_ESTOQUE IS

    CURSOR CUR_LISTA_ITEM_ESTOQUE IS SELECT * FROM LISTA_ITEM_ESTOQUE;

    c1 CUR_LISTA_ITEM_ESTOQUE%rowtype;
    
BEGIN 

    OPEN CUR_LISTA_ITEM_ESTOQUE;
    FETCH CUR_LISTA_ITEM_ESTOQUE INTO C1;
    LOOP
        EXIT WHEN CUR_LISTA_ITEM_ESTOQUE%NOTFOUND;
        
        
         dbms_output.put_line( C1.CODIGO|| ' ' ||C1.NOME || ' ' || C1.CLASSE || ' ' || C1.SECAO  || ' ' || C1.PORTARIA || ' ' ||
         C1.VALOR_DE_VENDA || ' ' || C1.QUANTIDADE_POR_CAIXA || ' ' || C1.SALDO_EM_ESTOQUE || ' ' || C1.ULTIMA_COMPRA || ' ' || C1.NOME_FORNECEDOR );
        
    FETCH CUR_LISTA_ITEM_ESTOQUE INTO C1;    
    END LOOP;
    CLOSE CUR_LISTA_ITEM_ESTOQUE;
END;


spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\LISTA_ITEM_ESTOQUE.csv'
set serveroutput on;
CALL R_LISTA_ITEM_ESTOQUE();
spool off;


-------------------------------------------------


CREATE OR REPLACE PROCEDURE R_LISTA_VENDAS IS

    CURSOR CUR_LISTA_VENDAS IS SELECT * FROM LISTA_VENDAS;

    c1 CUR_LISTA_VENDAS%rowtype;
    
BEGIN 

    OPEN CUR_LISTA_VENDAS;
    FETCH CUR_LISTA_VENDAS INTO C1;
    LOOP
        EXIT WHEN CUR_LISTA_VENDAS%NOTFOUND;
        
         dbms_output.put_line( C1.NUMERO_DA_VENDA|| ' ' ||C1.CLIENTE || ' ' || C1.CPF || ' ' || C1.CONVENIO  || ' ' || C1.CNPJ || ' ' ||
         C1.DATA_DA_VENDA || ' ' || C1.VALOR_TOTAL || ' ' || C1.INTERMEDIADOR || ' ');
        
    FETCH CUR_LISTA_VENDAS INTO C1;    
    END LOOP;
    CLOSE CUR_LISTA_VENDAS;
END;


spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\LISTA_VENDAS.csv'
set serveroutput on;
CALL R_LISTA_VENDAS();
spool off;


----------------------------


CREATE OR REPLACE PROCEDURE R_PRODUTOS_CADASTRADOS IS

    CURSOR CUR_PRODUTOS_CADASTRADOS IS SELECT * FROM PRODUTOS_CADASTRADOS;

    c1 CUR_PRODUTOS_CADASTRADOS%rowtype;
    
BEGIN 

    OPEN CUR_PRODUTOS_CADASTRADOS;
    FETCH CUR_PRODUTOS_CADASTRADOS INTO C1;
    LOOP
        EXIT WHEN CUR_PRODUTOS_CADASTRADOS%NOTFOUND;
        
         dbms_output.put_line( C1.CODIGO|| ' ' ||C1.NOME || ' ' || C1.CLASSE || ' ' || C1.SECAO  || ' ' || C1.PORTARIA || ' ' ||
         C1.FORNECEDOR || ' ' || C1.FABRICANTE || ' ' );
        
    FETCH CUR_PRODUTOS_CADASTRADOS INTO C1;    
    END LOOP;
    CLOSE CUR_PRODUTOS_CADASTRADOS;
END;


spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\PRODUTOS_CADASTRADOS.csv'
set serveroutput on;
CALL R_PRODUTOS_CADASTRADOS();
spool off;


--------------------


CREATE OR REPLACE PROCEDURE R_PRODUTOS_VENDIDOS IS

    CURSOR CUR_PRODUTOS_VENDIDOS IS SELECT * FROM PRODUTOS_VENDIDOS;

    c1 CUR_PRODUTOS_VENDIDOS%rowtype;
    
BEGIN 

    OPEN CUR_PRODUTOS_VENDIDOS;
    FETCH CUR_PRODUTOS_VENDIDOS INTO C1;
    LOOP
        EXIT WHEN CUR_PRODUTOS_VENDIDOS%NOTFOUND;
        
         dbms_output.put_line( C1.CLIENTE|| ' ' ||C1.ID_DA_VENDA || ' ' || C1.PRODUTO || ' ' || C1.VALOR_VENDIDO  || ' ' || C1.QUANTIDADE || ' ' ||
         C1.TOTAL_DO_PRODUTO || ' ' );
        
    FETCH CUR_PRODUTOS_VENDIDOS INTO C1;    
    END LOOP;
    CLOSE CUR_PRODUTOS_VENDIDOS;
END;


spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\PRODUTOS_VENDIDOS.csv'
set serveroutput on;
CALL R_PRODUTOS_VENDIDOS();
spool off;


-------------------


CREATE OR REPLACE PROCEDURE R_USUARIOS IS

    CURSOR CUR_USUARIOS IS SELECT * FROM USUARIOS;

    c1 CUR_USUARIOS%rowtype;
    
BEGIN 

    OPEN CUR_USUARIOS;
    FETCH CUR_USUARIOS INTO C1;
    LOOP
        EXIT WHEN CUR_USUARIOS%NOTFOUND;
        
         dbms_output.put_line( C1.CODIGO_USUARIO|| ' ' ||C1.NOME || ' ' || C1.NASCIMENTO || ' ' || C1.CELULAR  || ' ' || C1.TELEFONE || ' ' ||
         C1.EMAIL || ' ' || C1.ENDEREÇO);
        
    FETCH CUR_USUARIOS INTO C1;    
    END LOOP;
    CLOSE CUR_USUARIOS;
END;


spool  'C:\Users\pdeol\OneDrive\Área de Trabalho\AV1_BD\SPOOLS\USUARIOS.csv'
set serveroutput on;
CALL R_USUARIOS();
spool off;

---------------------------------------------------------------








   
